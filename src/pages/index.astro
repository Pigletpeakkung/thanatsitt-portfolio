---
// 🌙 Mirror of Inner Alchemy - Main Portfolio Page
import BaseLayout from '@layouts/BaseLayout.astro';

import Hero from '@sections/Hero.astro';
import About from '@sections/About.astro';
import Projects from '@sections/Projects.astro';
import Journal from '@sections/Journal.astro';
import Contact from '@sections/Contact.astro';
import Stars from '@components/Stars.astro';
import Footer from '@components/Footer.astro';

// 📄 Page Metadata
const pageTitle = 'Mirror of Inner Alchemy';
const pageDescription = 'Portfolio of Thanatsitt Santisamranwilai – A digital manifestation fusing design, code, and Jungian-inspired thought into a symbolic journey of self-discovery and cultural bridge-building.';

// 🌌 Stars Configuration for Homepage
const starsConfig = {
  intensity: 'cosmic',
  nebulaColor: 'mirror',
  enabled: true
};
---

<BaseLayout 
  title={pageTitle} 
  description={pageDescription}
  starsConfig={starsConfig}
>
  <!-- 🌌 Enhanced Animated Starfield Background -->
  <Stars 
    intensity="cosmic" 
    nebulaColor="mirror" 
    starCount={300}
    className="homepage-stars"
  />

  <!-- 🌟 Hero Section - The Awakening -->
  <section id="hero" class="hero-section relative scroll-mt-20" data-section="hero">
    <Hero />
  </section>

  <!-- 🪞 About Section - The Mirror -->
  <section id="about" class="about-section relative scroll-mt-20" data-section="about">
    <About />
  </section>

  <!-- 🎨 Projects Section - The Gallery -->
  <section id="projects" class="projects-section relative scroll-mt-20" data-section="projects">
    <Projects />
  </section>

  <!-- 📖 Journal Section - The Reflection -->
  <section id="journal" class="journal-section relative scroll-mt-20" data-section="journal">
    <Journal />
  </section>

  <!-- 📬 Contact Section - The Connection -->
  <section id="contact" class="contact-section relative scroll-mt-20" data-section="contact">
    <Contact />
  </section>

  <!-- 🌠 Footer Constellations -->
  <Footer />
</BaseLayout>

<style>
  /* 🎯 Enhanced Section Animations */
  section {
    opacity: 0;
    transform: translateY(30px) scale(0.98);
    transition: 
      opacity 1s cubic-bezier(0.4, 0, 0.2, 1),
      transform 1s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: opacity, transform;
  }

  section.visible {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  /* 🌟 Section-Specific Styling */
  .hero-section {
    min-height: 100vh;
    z-index: 20;
  }

  .about-section,
  .projects-section,
  .journal-section,
  .contact-section {
    z-index: 15;
    position: relative;
    background: rgba(255, 255, 255, 0.02);
    backdrop-filter: blur(1px);
  }

  /* 🌙 Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .about-section,
    .projects-section,
    .journal-section,
    .contact-section {
      background: rgba(0, 0, 0, 0.1);
    }
  }

  /* 🌌 Stars Container Optimization */
  .homepage-stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
  }

  /* 🎭 Enhanced Parallax Effects */
  .hero-section {
    transform-style: preserve-3d;
  }

  /* 📱 Mobile Optimizations */
  @media (max-width: 768px) {
    section {
      transform: translateY(20px) scale(0.99);
    }
    
    .hero-section {
      min-height: 100svh; /* Safe area viewport height */
    }
  }

  /* ♿ Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    section {
      opacity: 1;
      transform: none;
      transition: none;
    }
  }

  /* 🌟 Scroll Snap for Smooth Navigation */
  @media (min-width: 1024px) {
    html {
      scroll-snap-type: y proximity;
    }
    
    section {
      scroll-snap-align: start;
    }
  }

  /* 🔮 Section Dividers */
  section:not(.hero-section)::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(168, 85, 247, 0.3),
      transparent
    );
    z-index: 1;
  }

  /* 🎨 Section Hover Effects */
  section:hover {
    background: rgba(255, 255, 255, 0.03);
  }

  @media (prefers-color-scheme: dark) {
    section:hover {
      background: rgba(0, 0, 0, 0.15);
    }
  }
</style>

<script>
  // 🌟 Enhanced Intersection Observer with GSAP Integration
  document.addEventListener('DOMContentLoaded', () => {
    // 👁️ Advanced Intersection Observer
    const observerOptions = {
      threshold: [0.1, 0.3, 0.5],
      rootMargin: '-10% 0px -10% 0px'
    };

    const sectionObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const section = entry.target;
        const sectionName = section.dataset.section;
        
        if (entry.isIntersecting) {
          // ✨ Add visible class
          section.classList.add('visible');
          
          // 🎭 GSAP Enhanced Animations
          if (typeof gsap !== 'undefined') {
            // 🌟 Staggered animation for child elements
            const children = section.querySelectorAll('.card, .glass, h2, h3, p, .btn');
            if (children.length > 0) {
              gsap.fromTo(children, 
                { 
                  y: 20, 
                  opacity: 0,
                  scale: 0.95
                },
                {
                  y: 0,
                  opacity: 1,
                  scale: 1,
                  duration: 0.8,
                  stagger: 0.1,
                  ease: "power2.out",
                  delay: 0.2
                }
              );
            }
          }

          // 🔮 Section-specific animations
          switch (sectionName) {
            case 'hero':
              // Hero is handled by its own component
              break;
            case 'about':
              animateAboutSection(section);
              break;
            case 'projects':
              animateProjectsSection(section);
              break;
            case 'journal':
              animateJournalSection(section);
              break;
            case 'contact':
              animateContactSection(section);
              break;
          }
        }
      });
    }, observerOptions);

    // 🎯 Observe all sections
    document.querySelectorAll('section[data-section]').forEach((section) => {
      sectionObserver.observe(section);
    });

    // 🌟 Section-Specific Animation Functions
    function animateAboutSection(section) {
      if (typeof gsap !== 'undefined') {
        const timeline = gsap.timeline();
        timeline
          .from(section.querySelector('h2'), { 
            scale: 0.8, 
            opacity: 0, 
            duration: 0.8 
          })
          .from(section.querySelectorAll('.glass'), { 
            y: 30, 
            opacity: 0, 
            stagger: 0.2, 
            duration: 0.6 
          }, '-=0.4');
      }
    }

    function animateProjectsSection(section) {
      if (typeof gsap !== 'undefined') {
        const projects = section.querySelectorAll('.project-card, .card');
        gsap.fromTo(projects, 
          { 
            scale: 0.9, 
            opacity: 0, 
            rotationY: 15 
          },
          {
            scale: 1,
            opacity: 1,
            rotationY: 0,
            duration: 0.8,
            stagger: 0.15,
            ease: "back.out(1.7)"
          }
        );
      }
    }

    function animateJournalSection(section) {
      if (typeof gsap !== 'undefined') {
        const articles = section.querySelectorAll('.journal-entry, .card');
        gsap.fromTo(articles,
          { 
            x: -30, 
            opacity: 0 
          },
          {
            x: 0,
            opacity: 1,
            duration: 0.6,
            stagger: 0.1,
            ease: "power2.out"
          }
        );
      }
    }

    function animateContactSection(section) {
      if (typeof gsap !== 'undefined') {
        const contactElements = section.querySelectorAll('.contact-item, .glass, .btn');
        gsap.fromTo(contactElements,
          { 
            y: 20, 
            opacity: 0,
            scale: 0.95
          },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            duration: 0.7,
            stagger: 0.1,
            ease: "elastic.out(1, 0.5)"
          }
        );
      }
    }

    // 🌊 Smooth Scroll Enhancement
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          // 🎭 GSAP Smooth Scroll
          if (typeof gsap !== 'undefined') {
            gsap.to(window, {
              duration: 1.5,
              scrollTo: {
                y: target,
                offsetY: 80
              },
              ease: "power2.inOut"
            });
          } else {
            // Fallback smooth scroll
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });

    // 🎯 Performance Monitoring
    if ('PerformanceObserver' in window) {
      const perfObserver = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          if (entry.entryType === 'navigation') {
            console.log('🚀 Page Load Performance:', {
              domContentLoaded: entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart,
              loadComplete: entry.loadEventEnd - entry.loadEventStart
            });
          }
        });
      });
      perfObserver.observe({ entryTypes: ['navigation'] });
    }

    // 🌟 Add loaded class for final animations
    setTimeout(() => {
      document.body.classList.add('page-loaded');
    }, 100);
  });

  // 🔮 Utility Functions
  window.AlchemyPortfolio = {
    // 🎯 Navigate to section
    navigateToSection(sectionId) {
      const section = document.getElementById(sectionId);
      if (section && typeof gsap !== 'undefined') {
        gsap.to(window, {
          duration: 1.2,
          scrollTo: {
            y: section,
            offsetY: 80
          },
          ease: "power2.inOut"
        });
      }
    },

    // 🌟 Trigger section animation
    animateSection(sectionId) {
      const section = document.getElementById(sectionId);
      if (section) {
        section.classList.add('visible');
      }
    },

    // 🎨 Update stars configuration
    updateStars(config) {
      const starsElement = document.querySelector('.homepage-stars');
      if (starsElement && config) {
        // Update stars configuration dynamically
        Object.keys(config).forEach(key => {
          starsElement.dataset[key] = config[key];
        });
      }
    }
  };
</script>
